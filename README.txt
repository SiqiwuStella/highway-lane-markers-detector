1. Introduction
The program includes 2 c++ files, “warp. cpp” and “track.cpp”. 
1) Before running the program, it is required to changed the image file names in the “images” folder to be consecutive, meaning changing file names starts from “mono_0000002050.png” to start from “mono_0000000348.png”. Because reading the files in sequence requires the file names to be consecutive.

2) Run “track.cpp” to track the highway markers. The matrix files(.xml) generated by “warp.cpp” are used in “track.cpp” to finish the perspective warp.


2. Problem Analysis
This problem is to detect the high way lane markers. 
1) First I tried to detect the lane markers directly using Hough Transformation, but I found that it is difficult to determine the proper number of slope to select the lines. So I used perspective warp to get a plan view of the lane. In this way the lane markers are approximately perpendicular to the x-axis. It is easier to identify the slope. But because of warping, the cars in front of the camera are distorted and generate some extra lines that may be mistaken for highway lane markers by the program.

2) To better detect the lane markers, I tried to smooth the image to reduce noise and enhance the image for better recognizing the markers. However, the result seem to be poorer than using the original image. (Due to the time constrain, I used simple Gaussian Blur to smooth and Histogram Equalization within the region of interest to enhance the image.) For the Gaussian, it undercuts the edges of some of the lane markers and makes it harder to detect. For the enhancement, it enhances some cracks with in the lane and makes the result even more noisy.

3. Things to Improve
1) For some of the scenes that’s too dark or too bright, we can use self-adjust enhancement to pre-process the images before detecting lane markers.
2) Find a way to identify the dotted lines and connect them together.
3) Find a way to eliminate the cracks, noise, and influence of surroundings. 